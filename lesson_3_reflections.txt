When would you want to use a remote repository rather than keeping all your work local?
    -When we need to collaborate.
    -When we need to make the work available for others either privately or publicly.
    -When we need to be mobile and use multiple devices.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
    -When my experiments need not be made public I will be able to create branches only in the local repository and keep them private.
    -Gives me control over when something can be made available for other contributors.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
    -Forks: Use when you want to work on an already created project.  You can leave the orginal as is and work on your copy or fork.
        This method protects the original repository as changes made in forks do not automatically update original.
        Forking is available only in remote github.
    -Clones: Use when creating a local copy in your computer from the remote.  Both clone and source are kept synced by using push and pull commands.
    -Branch: Use when deviating from an existing git.  Branch helps us experiment without affecting other branches.
        We can also use it to create versions with variations.
        Branches can be merged whenever necessary and thus this method is very useful for development.

What is the benefit of having a copy of the last known state of the remote stored locally?
    -Git status will provide information regarding current state of remote even if we are offline.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
    -I would have to use GoogleDocs or similar app for each document.  Versioning will be very difficult.
    -I could store my files in a cloud drive and ask each contributor to propose and seek permission for each change they do.  Files can then be udpated.
        Commit history and branching possiblity will not be available, therefore we may a need a dedicated person to manage all information.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
    -I would make changes in a separate branch when I am one of many contributors. It helps disconnect my changes from others's work, test it before making pull request.
        Merging takes place later after those concerned are able to review and approve.
        I will also create branches when I am not sure if I will be incorporating the changes immediately.
    -I would make the change in master if I am the authority managing the project and the change is critical.